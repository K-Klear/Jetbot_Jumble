local jetbot = {}
local spawn_location = {vmath.vector3(950, 300, 0), vmath.vector3(450, 300, 0)}

local pickup_min_x = 280 + 50
local pickup_max_x = 1150 - 50
local pickup_min_y = 70 + 50
local pickup_max_y = 570 - 50
local pickup_distance = 120
local pickup
local pickup_timer

local link_hook = vmath.vector3(0, -10, 0)
local link_hook_chain = vmath.vector3(6, 0, 0)
local link_hook_chain2 = vmath.vector3(-6, 0, 0)
local link_hook_rope = vmath.vector3(3, 0, 0)
local link_hook_rope2 = vmath.vector3(-3, 0, 0)
local chain_link = {}

local settings = require("main/game_settings")


local function get_distance(pos1, pos2)
	local dx = pos1.x - pos2.x
	local dy = pos1.y - pos2.y
	return math.sqrt(dx * dx + dy * dy)
end

local function spawn_pickup()
	local location_picked = false
	local location
	repeat
		location = vmath.vector3(math.random(pickup_min_x, pickup_max_x), math.random(pickup_min_y, pickup_max_y), 0.5)
		local dist_1 = get_distance(location, go.get_position(jetbot[1][hash("/body")]))
		local dist_2 = get_distance(location, go.get_position(jetbot[2][hash("/body")]))
		if dist_1 > pickup_distance and dist_2 > pickup_distance then location_picked = true end
	until location_picked
	local curse
	local pickup_type
	local secret = false
	if settings.powerups and settings.curses then
		curse = math.random() > 0.5
	elseif settings.powerups then curse = false else curse = true end
	if curse then
		pickup_type = settings.curse_types[math.random(1, #settings.curse_types)]
		if settings.curses_secret then secret = true end
	else
		pickup_type = settings.powerup_types[math.random(1, #settings.powerup_types)]
		if settings.powerups_secret then secret = true end
	end
	pickup = factory.create("#spawn_pickup", location, nil, {type = pickup_type, curse = curse, secret = secret}, vmath.vector3(0.5, 0.5, 0.5))
	pickup_timer = timer.delay(settings.pickup_time, false, function() msg.post(pickup, "despawn") end)
end

function init(self)
	math.randomseed(os.time())
	math.random(); math.random(); math.random()
	physics.set_gravity(vmath.vector3(0, settings.gravity * -7.5, 0))
	msg.post(".", "acquire_input_focus")
	local props = {}
	props[hash("/body")] = {player = 1}
	jetbot[1] = collectionfactory.create("#spawn_jetbot", spawn_location[1], nil, props, vmath.vector3(0.5, 0.5, 1))
	props[hash("/body")] = {player = 2}
	jetbot[2] = collectionfactory.create("#spawn_jetbot", spawn_location[2], nil, props, vmath.vector3(0.5, 0.5, 1))
	if settings.chain_type == "CHAIN" then
		chain_link[1] = factory.create("#spawn_chain", vmath.vector3(720, 360, 0), nil, nil, vmath.vector3(0.5, 0.5, 0.5))
		local bot_1_co = msg.url(nil, jetbot[1][hash("/body")], "co_body")
		local bot_2_co = msg.url(nil, jetbot[2][hash("/body")], "co_body")
		local link_co = msg.url(nil, chain_link[1], "co")
		physics.create_joint(physics.JOINT_TYPE_HINGE, link_co, "joint_bot", vmath.vector3(0, 0, 0), bot_2_co, link_hook)
		for x = 2, settings.chain_length do
			local properties = {type = 1}
			local z_pos = 0
			if x % 2 == 0 then properties = {type = 2}; z_pos = -0.05 end
			chain_link[x] = factory.create("#spawn_chain", vmath.vector3(720, 360, z_pos), nil, properties, vmath.vector3(0.5, 0.5, 0.5))
			physics.create_joint(physics.JOINT_TYPE_HINGE, msg.url(nil, chain_link[x], "co"), "joint", link_hook_chain, msg.url(nil, chain_link[x - 1], "co"), link_hook_chain2)
		end
		link_co = msg.url(nil, chain_link[settings.chain_length], "co")
		physics.create_joint(physics.JOINT_TYPE_HINGE, link_co, "joint_bot", vmath.vector3(0, 0, 0), bot_1_co, link_hook)
	elseif settings.chain_type == "ROPE" then
		chain_link[1] = factory.create("#spawn_rope", vmath.vector3(720, 360, 0), nil, nil, vmath.vector3(0.5, 0.5, 0.5))
		local bot_1_co = msg.url(nil, jetbot[1][hash("/body")], "co_body")
		local bot_2_co = msg.url(nil, jetbot[2][hash("/body")], "co_body")
		local link_co = msg.url(nil, chain_link[1], "co")
		physics.create_joint(physics.JOINT_TYPE_HINGE, link_co, "joint_bot", vmath.vector3(0, 0, 0), bot_2_co, link_hook)
		for x = 2, settings.chain_length do
			chain_link[x] = factory.create("#spawn_rope", vmath.vector3(720, 360, 0), nil, properties, vmath.vector3(0.5, 0.5, 0.5))
			if x < settings.chain_length then msg.post(chain_link[x], "middle", {next = msg.url(nil, chain_link[x - 1], "co")}) end
			local props = {length = 0, damping = 0.5, frequency = 7}
			physics.create_joint(physics.JOINT_TYPE_SPRING, msg.url(nil, chain_link[x], "co"), "joint", link_hook_rope, msg.url(nil, chain_link[x - 1], "co"), link_hook_rope2, props)
		end
		link_co = msg.url(nil, chain_link[settings.chain_length], "co")
		physics.create_joint(physics.JOINT_TYPE_HINGE, link_co, "joint_bot", vmath.vector3(0, 0, 0), bot_1_co, link_hook)
	end
	if settings.powerups or settings.curses then
		pickup_timer = timer.delay(math.random(settings.pickup_frequency_min, settings.pickup_frequency_max), false, spawn_pickup)
	end
	tilemap.set_tile("/floor#floor", "floor", 0, 0, 0)
	tilemap.set_tile("/floor#floor", "floor", 65, 41, 0)
	tilemap.set_tile("/ceiling#ceiling", "ceiling", 0, 0, 0)
	tilemap.set_tile("/ceiling#ceiling", "ceiling", 65, 41, 0)
	tilemap.set_tile("/wall_left#wall_left", "wall_left", 0, 0, 0)
	tilemap.set_tile("/wall_left#wall_left", "wall_left", 65, 41, 0)
	tilemap.set_tile("/wall_right#wall_right", "wall_right", 0, 0, 0)
	tilemap.set_tile("/wall_right#wall_right", "wall_right", 65, 41, 0)

	local tiles = {floor = {spikes = {17, 9, 1}, wall = {3, 3, 3}, bounce = {19, 19, 19}},
	wall_left = {spikes = {18, 10, 2}, wall = {4, 4, 4}, bounce = {20, 20, 20} },
	ceiling = {spikes = {41, 33, 25}, wall = {12, 12, 12}, bounce = {28, 28, 28}},
	wall_right = {spikes = {42, 34, 26}, wall = {11, 11, 11}, bounce = {27, 27, 27}}}
			
	for y = 1, 3 do
		for x = 1, 64 do
			tilemap.set_tile("/floor#floor", "floor", x, y, tiles.floor[settings.arena_floor][y])
			tilemap.set_tile("/ceiling#ceiling", "ceiling", x, 41 - y, tiles.ceiling[settings.arena_ceiling][y])
			if x < 41 then
				tilemap.set_tile("/wall_left#wall_left", "wall_left", y, x, tiles.wall_left[settings.arena_wall_left][y])
				tilemap.set_tile("/wall_right#wall_right", "wall_right", 65 - y, x, tiles.wall_right[settings.arena_wall_right][y])
			end
		end
	end

	if settings.arena_floor == "bounce" then
		msg.post("/floor#co_wall", "disable")
	else
		msg.post("/floor#co_bounce", "disable")
	end
	if settings.arena_ceiling == "bounce" then
		msg.post("/ceiling#co_wall", "disable")
	else
		msg.post("/ceiling#co_bounce", "disable")
	end
	if settings.arena_wall_left == "bounce" then
		msg.post("/wall_left#co_wall", "disable")
	else
		msg.post("/wall_left#co_bounce", "disable")
	end
	if settings.arena_wall_right == "bounce" then
		msg.post("/wall_right#co_wall", "disable")
	else
		msg.post("/wall_right#co_bounce", "disable")
	end
end

local buttons = {
	p2_right = {0, 200, 0, 200},
	p2_up = {0, 200, 260, 460},
	p2_left = {0, 200, 520, 720},
	p1_right = {1240, 1440, 520, 720},
	p1_up = {1240, 1440, 260, 460},
	p1_left = {1240, 1440, 0, 200},
}

local function pick_button(coords, x, y)
	if x > coords[1] and x < coords[2] and y > coords[3] and y < coords[4] then return true end
end

function on_input(self, action_id, action)
	local buttons_held = {}
	if action_id == hash("touch") then
		for i, touch_action in ipairs(action.touch) do
			for key, val in pairs(buttons) do
				if pick_button(val, touch_action.x, touch_action.y) and not touch_action.released then
					buttons_held[key] = true
				end
			end
		end
		for key in pairs(buttons) do
			if buttons_held[key] then
				msg.post(".", "button_state", {state = true, button = key})
				if key == "p1_right" then
					msg.post(jetbot[1][hash("/body")], "button_pressed", {button = "key_pressed_right"})
				elseif key == "p1_left" then
					msg.post(jetbot[1][hash("/body")], "button_pressed", {button = "key_pressed_left"})
				elseif key == "p1_up" then
					msg.post(jetbot[1][hash("/body")], "button_pressed", {button = "key_pressed_up"})
				elseif key == "p2_right" then
					msg.post(jetbot[2][hash("/body")], "button_pressed", {button = "key_pressed_right"})
				elseif key == "p2_left" then
					msg.post(jetbot[2][hash("/body")], "button_pressed", {button = "key_pressed_left"})
				elseif key == "p2_up" then
					msg.post(jetbot[2][hash("/body")], "button_pressed", {button = "key_pressed_up"})
				end
			else
				msg.post(".", "button_state", {state = false, button = key})
			end
		end
	elseif action_id == hash("click") then
		for key, val in pairs(buttons) do
			if pick_button(val, action.x, action.y) and not action.released then
				buttons_held[key] = true
			end
		end
		for key in pairs(buttons) do
			if buttons_held[key] then
				msg.post(".", "button_state", {state = true, button = key})
				if key == "p1_right" then
					msg.post(jetbot[1][hash("/body")], "button_pressed", {button = "key_pressed_right"})
				elseif key == "p1_left" then
					msg.post(jetbot[1][hash("/body")], "button_pressed", {button = "key_pressed_left"})
				elseif key == "p1_up" then
					msg.post(jetbot[1][hash("/body")], "button_pressed", {button = "key_pressed_up"})
				elseif key == "p2_right" then
					msg.post(jetbot[2][hash("/body")], "button_pressed", {button = "key_pressed_right"})
				elseif key == "p2_left" then
					msg.post(jetbot[2][hash("/body")], "button_pressed", {button = "key_pressed_left"})
				elseif key == "p2_up" then
					msg.post(jetbot[2][hash("/body")], "button_pressed", {button = "key_pressed_up"})
				end
			else
				msg.post(".", "button_state", {state = false, button = key})
			end
		end
	end
end

local f_respawn = {
	function ()
		go.delete(jetbot[1])
		local props = {}
		props[hash("/body")] = {player = 1}
		jetbot[1] = collectionfactory.create("#spawn_jetbot", spawn_location[1], nil, props, vmath.vector3(0.5, 0.5, 1))
		if settings.chain_type ~= "NONE" then
			local bot_co = msg.url(nil, jetbot[1][hash("/body")], "co_body")
			local link_co = msg.url(nil, chain_link[settings.chain_length], "co")
			physics.destroy_joint(link_co, "joint_bot")
			physics.create_joint(physics.JOINT_TYPE_HINGE, link_co, "joint_bot", vmath.vector3(0, 0, 0), bot_co, link_hook)
		end
	end,
	function ()
		go.delete(jetbot[2])
		local props = {}
		props[hash("/body")] = {player = 2}
		jetbot[2] = collectionfactory.create("#spawn_jetbot", spawn_location[2], nil, props, vmath.vector3(0.5, 0.5, 1))
		if settings.chain_type ~= "NONE" then
			local bot_co = msg.url(nil, jetbot[2][hash("/body")], "co_body")
			local link_co = msg.url(nil, chain_link[1], "co")
			physics.destroy_joint(link_co, "joint_bot")
			physics.create_joint(physics.JOINT_TYPE_HINGE, link_co, "joint_bot", vmath.vector3(0, 0, 0), bot_co, link_hook)
		end
	end
}

function on_message(self, message_id, message, sender)
	if message_id == hash("death") then
		timer.delay(settings.respawn_delay, false, f_respawn[message.player])
	elseif message_id == hash("pickup_removed") then
		timer.cancel(pickup_timer)
		pickup_timer = timer.delay(math.random(settings.pickup_frequency_min, settings.pickup_frequency_max), false, spawn_pickup)
	end
end