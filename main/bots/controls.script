local settings = require("main/game_settings")

go.property("player", 1)
go.property("up", 1)
go.property("left", 1)
go.property("right", 1)


local jet_power = {
	jet_bottom_left = settings.jet_power_lower,
	jet_bottom_right = settings.jet_power_lower,
	jet_top_right = settings.jet_power_upper,
	jet_top_left = settings.jet_power_upper,
}

function init(self)
	msg.post(".", "acquire_input_focus")
	physics.create_joint(physics.JOINT_TYPE_HINGE, "body#co_head", "joint", vmath.vector3(0, 0, 0), "body#co_body", vmath.vector3(0, 0, 0),
	{upper_angle = math.rad(0), lower_angle = math.rad(0), enable_limit = true})
	physics.create_joint(physics.JOINT_TYPE_HINGE, "jet_bottom_left#co", "joint", vmath.vector3(0, 0, 0), "body#co_body", vmath.vector3(-15, -30, 0),
	{upper_angle = math.rad(45), lower_angle = math.rad(45), enable_limit = true})
	physics.create_joint(physics.JOINT_TYPE_HINGE, "jet_bottom_right#co", "joint", vmath.vector3(0, 0, 0), "body#co_body", vmath.vector3(15, -30, 0),
	{upper_angle = math.rad(-45), lower_angle = math.rad(-45), enable_limit = true})
	physics.create_joint(physics.JOINT_TYPE_HINGE, "jet_top_left#co", "joint", vmath.vector3(0, 0, 0), "body#co_body", vmath.vector3(-20, 0, 0),
	{upper_angle = math.rad(120), lower_angle = math.rad(120), enable_limit = true})
	physics.create_joint(physics.JOINT_TYPE_HINGE, "jet_top_right#co", "joint", vmath.vector3(0, 0, 0), "body#co_body", vmath.vector3(20, 0, 0),
	{upper_angle = math.rad(-120), lower_angle = math.rad(-120), enable_limit = true})
	self.alive = true
	self.jet_type = "#flame"
	self.jet_top_left = false
	self.jet_top_right = false
	self.jet_bottom_left = false
	self.jet_bottom_right = false
	self.jets = {jet_top_left = self.jet_top_left, jet_top_right = self.jet_top_right, jet_bottom_left = self.jet_bottom_left, jet_bottom_right = self.jet_bottom_right}
	self.jet_power_multiplier = 1
	if self.player == 1 then
		self.up = hash("p1_up")
		self.left = hash("p1_left")
		self.right = hash("p1_right")
	else
		self.up = hash("p2_up")
		self.left = hash("p2_left")
		self.right = hash("p2_right")
		sprite.play_flipbook("body#body", "body2")
		sprite.play_flipbook("jet_bottom_left#jet", "jet2")
		sprite.play_flipbook("jet_bottom_right#jet", "jet2")
		sprite.play_flipbook("jet_top_left#jet", "jet2")
		sprite.play_flipbook("jet_top_right#jet", "jet2")
	end
end

local function die(self)
	self.alive = false
	self.key_pressed_left = false
	self.key_pressed_right = false
	self.key_pressed_up = false
	for _jet, val in pairs(self.jets) do
		particlefx.stop(_jet..self.jet_type)
		self[_jet] = nil
	end
	if self.boost then timer.cancel(self.boost) end
	self.jet_power_multiplier = 1
	msg.post(".", "disable")
	msg.post("/main", "death", {player = self.player})
	msg.post("jet_bottom_left", "death")
	msg.post("jet_bottom_right", "death")
	msg.post("jet_top_left", "death")
	msg.post("jet_top_right", "death")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if message.group == hash("spikes") then
			die(self)
		end
	elseif message_id == hash("button_pressed") then
		self[message.button] = true
	elseif message_id == hash("death") then
		die(self)
	elseif message_id == hash("pickup") then
		if message.type == hash("jet") then
			for _jet, val in pairs(self.jets) do
				particlefx.stop(_jet..self.jet_type)
				if self[_jet] then
					particlefx.play(_jet.."#flame_boosted")
				end
			end
			self.jet_type = "#flame_boosted"
			self.jet_power_multiplier = settings.pickup_boost_multiplier
			if self.boost then timer.cancel(self.boost) end
			self.boost = timer.delay(settings.pickup_boost_duration, false, function()
				for _jet, val in pairs(self.jets) do
					particlefx.stop(_jet..self.jet_type)
					if self[_jet] then
						particlefx.play(_jet.."#flame")
					end
				end
				self.jet_type = "#flame"
				self.jet_power_multiplier = 1
				self.boost = nil
			end)
		elseif message.type == hash("spin") then
			msg.post("body#co_body", "apply_force", {force = vmath.vector3(settings.curse_spin_force, 0, 0), position = vmath.vector3(0, 200, 0)})
			msg.post("body#co_body", "apply_force", {force = vmath.vector3(-settings.curse_spin_force, 0, 0), position = vmath.vector3(0, -200, 0)})
		else
			print("Unknown pickup type")
		end
	end
end

function update(self, dt)
	if self.alive then
		local config = {}
		if self.key_pressed_left == true then config.jet_top_right = true end
		if self.key_pressed_right == true then config.jet_top_left = true end
		if self.key_pressed_up == true then config.jet_bottom_right = true; config.jet_bottom_left = true end

		for active_jet, val in pairs(self.jets) do
			if config[active_jet] then
				if not self[active_jet] then
					particlefx.play(active_jet..self.jet_type)
					self[active_jet] = true
				end
				if self[active_jet] then
					dir = vmath.rotate(go.get_rotation(active_jet), vmath.vector3(0, jet_power[active_jet] * self.jet_power_multiplier, 0))
					pos = vmath.rotate(go.get_rotation(active_jet), vmath.vector3(0, 0, 0))
					msg.post("body#co_body", "apply_force", {force = dir, position = go.get_world_position("body") + pos})
				end
			else
				if self[active_jet] then
					particlefx.stop(active_jet..self.jet_type)
					self[active_jet] = false
				end
			end
		end
		
		self.key_pressed_left = false
		self.key_pressed_right = false
		self.key_pressed_up = false
	end
end


function on_input(self, action_id, action)
	if action_id == self.left then
		if action.released then
			self.key_pressed_left = false
		else
			self.key_pressed_left = true
		end
	elseif action_id == self.right then
		if action.released then
			self.key_pressed_right = false
		else
			self.key_pressed_right = true
		end
	elseif action_id == self.up then
		if action.released then
			self.key_pressed_up = false
		else
			self.key_pressed_up = true
		end
	end
end
